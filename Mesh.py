import os

def set_Mesh(name_solid):
    # Extract info from the mesh file in Abacus format (*.inp)
        # and write the info to csv files.
    # name_solid: string, name of the solid. 
    #################################
    # Open files for writing data
    #################################

    # Node labels, coordinates
    f_nodes = open('./mesh/nodes.csv', 'w')
    # Element labels, element node labels
    f_elements = open('./mesh/elements.csv', 'w')
    
    # Boundary node labels, Dirichlet boundary
    f_nodes_BC_Dirichlet = open('./mesh/nodes_BC_Dirichlet.csv', 'w')
    
    # Boundary node labels, Neumann boundary
    f_nodes_BC_Neumann = open('./mesh/nodes_BC_Neumann.csv', 'w')
    
    # Boundary facets labels
    #f_facets_BC = open('./mesh/facets_BC.csv', 'w')
    
    # Neumann boundary facets labels
    #f_facets_BC_Neumann = open('./mesh/facets_BC_Neumann.csv', 'w')
    
    
    # Boundary node labels, Neumann boundary
    #f_tag_node_BC_Neumann = open('./mesh/tag_node_BC_Neumann.csv', 'w')
    
    # Boundary edge labels
    #f_edge_BC = open('./mesh/tag_edge_BC.csv', 'w')
    # Boundary edge labels, Neumann boundary
    #f_tag_edge_BC_Neumann = open('./mesh/tag_edge_BC_Neumann.csv', 'w')

    # Mesh file, Abaqus format, generated by gmsh
    path_mesh_file = f'./gmsh/{name_solid}/abaqus.inp'
    
    #################################
    # Read node coordinates
    #################################
    # Extract nodes
    with open(path_mesh_file, 'r') as f_mesh:
        # Last line
        line_old = ''
        for line in f_mesh:
            # Start reading node data below '*NODE\n'
            if line_old != '*NODE\n':
                line_old = line
            # Stop reading when line '******* E L E M E N T S *************\n' is reached
            elif line == '******* E L E M E N T S *************\n':
                break
            else:
                f_nodes.write(line)
    
    #################################
    # Read elements
    #################################  


    # Extract elements:          
    with open(path_mesh_file, 'r') as f_mesh:
        line_old = ''
        for line in f_mesh:
            # Start reading
            if line_old != '*ELEMENT, type=C3D4, ELSET=Volume1\n':
                line_old = line
            # Stop reading
            elif line == '*ELSET,ELSET=Dirichlet\n':
                break
            # Read elemental nodes's labels
            elif line[0] != '*':
                f_elements.write(line)

    
    #################################
    # Read Dirichlet BC nodes
    #################################  
    # Extract Dirichlet BC nodes:
    with open(path_mesh_file, 'r') as f_mesh:
        line_old = ''
        for line in f_mesh:
            # Start reading
            if line_old != '*NSET,NSET=Dirichlet\n':
                line_old = line
            # Stop reading when the first line beginning with * is reached
            elif line[0] == '*':
                break
            else: 
                # There may be several lines
                # To convert them into a single line,
                # we drop the last character '\n' by using [0:-1]
                f_nodes_BC_Dirichlet.write(line[0:-1])
                
    #################################
    # Read Neumann BC nodes
    #################################  
    
    with open(path_mesh_file, 'r') as f_mesh:
        line_old = ''
        for line in f_mesh:
            # Start reading
            if line_old != '*NSET,NSET=Neumann\n':
                line_old = line
            # Stop reading when the first line beginning with * is reached
            elif line[0] == '*':
                break
            else: 
                # There may be several lines
                # To convert them into a single line,
                # we drop the last character '\n' by using [0:-1]
                f_nodes_BC_Neumann.write(line[0:-1])
    
    
    
    
    
    ''' 
    #################################
    # Read Facets
    ################################# 
    # Extract facets on the whole boundary:          
    with open(path_mesh_file, 'r') as f_mesh:
        line_old = ''
        for line in f_mesh:
            # Start reading
            if line_old != '******* E L E M E N T S *************\n':
                line_old = line
            # Stop reading
            elif line == '*ELEMENT, type=C3D4, ELSET=Volume1\n':
                break
            # Read elemental nodes's labels
            elif line[0] != '*': 
                f_facets_BC.write(line)
                
               
    #################################
    # Read Neumann BC facets
    #################################  
    # Extract facets on the Neumann boundary:          
    with open(path_mesh_file, 'r') as f_mesh:
        line_old = ''
        for line in f_mesh:
            # Start reading
            if line_old != '*ELSET,ELSET=Neumann\n':
                line_old = line
            # Stop reading
            elif line == '*ELSET,ELSET=Inner\n':
                break
            # Read elemental nodes's labels
            elif line[0] != '*': 
                # There may be several lines
                # To convert them into a single line,
                # we drop the last character '\n' by using [0:-1]
                f_facets_BC_Neumann.write(line[0:-1])
    
    '''
    
                
   
        

    #################################
    # Close file objects
    #################################
    f_nodes.close()
    f_elements.close()
    f_nodes_BC_Dirichlet.close()
    f_nodes_BC_Neumann.close()
    #f_facets_BC.close()
    #f_facets_BC_Neumann.close()
    
    
    
    
def output_VTK(solid, name_folder):
    # Write data to VTK file
    # Displacement and stress are written
    
    # Header
    folder_path = f'./data/{name_folder}'
    # Create the folder if it doesn't exist
    os.makedirs(folder_path, exist_ok=True)
    
    
    f = open(f'./data/{name_folder}/data.vtk', 'w')
    f.write('# vtk DataFile Version 3.0\n')
    f.write('Tetrahedral mesh solution\n')
    f.write('ASCII\n')
    f.write('DATASET UNSTRUCTURED_GRID\n')
    
    # Nodes
    f.write(f'POINTS {solid.num_nodes} float\n')
    for r in solid.nodes:
        f.write(f'{r[0]} {r[1]} {r[2]}\n')
        
    # Elements
    f.write(f'CELLS {solid.num_elements} {5*solid.num_elements}\n')
    for e in solid.elements:
        f.write(f'4 {e[0]} {e[1]} {e[2]} {e[3]}\n')
        
    f.write(f'CELL_TYPES {solid.num_elements}\n')
    for i in range(solid.num_elements):
        f.write('10\n')
    
    
    # Data     
    f.write(f'POINT_DATA {solid.num_nodes}\n')    
    
    # Vector-valued data          
    f.write("VECTORS u float\n")
    
    for idx_node in range(solid.num_nodes):
        u = solid.u[:, idx_node]
        f.write(f"{u[0]} {u[1]} {u[2]}\n")
        
    
    # Scalar valued data   
    # Stress_x
    f.write('SCALARS Stress_x float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[0, idx_node]
        f.write(f"{stress}\n")
        
    # Stress_y
    f.write('SCALARS Stress_y float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[1, idx_node]
        f.write(f"{stress}\n")
        
    # Stress_z
    f.write('SCALARS Stress_z float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[2, idx_node]
        f.write(f"{stress}\n")
        
        
    # Stress_xy
    f.write('SCALARS Stress_xy float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[3, idx_node]
        f.write(f"{stress}\n")
        
    # Stress_xz
    f.write('SCALARS Stress_xz float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[4, idx_node]
        f.write(f"{stress}\n")
        
    # Stress_yz
    f.write('SCALARS Stress_yz float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[5, idx_node]
        f.write(f"{stress}\n")
        
    # von Mises stress
    f.write('SCALARS Stress_v float\n')
    f.write('LOOKUP_TABLE default\n')
    for idx_node in range(solid.num_nodes):
        stress = solid.stress[6, idx_node]
        f.write(f"{stress}\n")
        
    
    
    f.close()   


def output_VTK_exact(solid, name_folder, exact=False):
    # Write data to VTK file
    # For comparison between numerical and exact solutions
    f = open(f'./data/{name_folder}/data.vtk', 'w')
    f.write('# vtk DataFile Version 3.0\n')
    f.write('Tetrahedral mesh solution\n')
    f.write('ASCII\n')
    f.write('DATASET UNSTRUCTURED_GRID\n')
    
    f.write(f'POINTS {solid.num_nodes} float\n')
    for r in solid.nodes:
        f.write(f'{r[0]} {r[1]} {r[2]}\n')
        
    
    f.write(f'CELLS {solid.num_elements} {5*solid.num_elements}\n')
    for e in solid.elements:
        f.write(f'4 {e[0]} {e[1]} {e[2]} {e[3]}\n')
        
    f.write(f'CELL_TYPES {solid.num_elements}\n')
    for i in range(solid.num_elements):
        f.write('10\n')
    
    
                    
    f.write(f'POINT_DATA {solid.num_nodes}\n')    
    
    f.write("VECTORS u float\n")
    
    for idx_node in range(solid.num_nodes):
        u = solid.u[:, idx_node]
        f.write(f"{u[0]} {u[1]} {u[2]}\n")
        
        
    if exact:
        f.write("VECTORS u_exact float\n")
        
        for idx_node in range(solid.num_nodes):
            u = solid.u_exact[:, idx_node]
            f.write(f"{u[0]} {u[1]} {u[2]}\n")
    
    
    
    f.close()
    
    
    
    
    
      